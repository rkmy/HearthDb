using System;
using System.Linq;
using System.Net;
using System.IO;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Formatting;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace HearthDb.EnumsGenerator
{
	internal class Program
	{
		private const string EnumsFile = "../../../../HearthDb/Enums/Enums.cs";
		private const string UtilsFile = "../../../../HearthDb/Enums/Utils.cs";

		static string FetchUrl(string url)
		{
			ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;
			string retval;
			var bustedUrl = url + "?" + DateTime.Now.Ticks;
			Console.WriteLine($"Fetching {bustedUrl}...");
			using (var wc = new WebClient())
				retval = wc.DownloadString(url);
			return retval;
		}

		static string FetchEnums()
		{

			string enums = FetchUrl("https://api.hearthstonejson.com/v1/enums.cs");

			Console.WriteLine($"Generating enums namespace...");
			var header = ParseLeadingTrivia(@"/* THIS FILE WAS GENERATED BY HearthDb.EnumsGenerator. DO NOT EDIT. */" + Environment.NewLine + Environment.NewLine);
			var members = ParseCompilationUnit(enums).Members;
			var first = members.First().WithLeadingTrivia(header);
			var @namespace = NamespaceDeclaration(IdentifierName("HearthDb.Enums")).AddMembers(new[] { first }.Concat(members.Skip(1)).ToArray());

			Console.WriteLine($"Formatting enums namespace...");
			var root = Formatter.Format(@namespace, new AdhocWorkspace());

			return root.ToString();
		}

		static string FetchUtils()
		{
			string utils = FetchUrl("https://api.hearthstonejson.com/v1/utils.cs");

			Console.WriteLine($"Generating utils namespace...");
			var header = ParseLeadingTrivia(@"/* THIS FILE WAS GENERATED BY HearthDb.EnumsGenerator. DO NOT EDIT. */" + Environment.NewLine + Environment.NewLine);
			var compilationUnit = ParseCompilationUnit(utils);
			var usings = compilationUnit.Usings;
			var members = compilationUnit.Members;
			var first = members.First().WithLeadingTrivia(header);
			var @namespace = NamespaceDeclaration(IdentifierName("HearthDb.Enums")).AddUsings(usings.ToArray()).AddMembers(new[] { first }.Concat(members.Skip(1)).ToArray());

			Console.WriteLine($"Formatting utils namespace...");
			var root = Formatter.Format(@namespace, new AdhocWorkspace());

			return root.ToString();
		}


		static void Main()
		{
			var changed = 0;

			var enumsString = FetchEnums();
			var utilsString = FetchUtils();

			string prevEnums;
			using (var sr = new StreamReader(EnumsFile))
				prevEnums = sr.ReadToEnd();

			string prevUtils;
			using (var sr = new StreamReader(UtilsFile))
				prevUtils = sr.ReadToEnd();

			if (enumsString != prevEnums)
			{
				Console.WriteLine($"Saving to '{EnumsFile}'...");
				using (var sr = new StreamWriter(EnumsFile))
					sr.Write(enumsString);
				changed++;
			}

			if (utilsString != prevUtils)
			{
				Console.WriteLine($"Saving to '{UtilsFile}'...");
				using (var sr = new StreamWriter(UtilsFile))
					sr.Write(utilsString);
				changed++;
			}


			if (changed > 0)
			{
				Console.WriteLine("Done. Press any key to exit.");
			}
			else
			{
				Console.WriteLine($"No changes. Press any key to exit.");
			}

			Console.ReadKey();
		}
	}
}
